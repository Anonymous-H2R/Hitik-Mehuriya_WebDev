Que1-Explain Life cycle in Class Component and functional component with Hooks


Ans1-
import React, { Component } from 'react';
import PropTypes from 'prop-types';

class LifeCycle extends Component {
    constructor(props)
     {
        super(props);
        console.log("constructor called");
        this.state={counter:0}

    }

    // componentWillMount()
    //  {

    // }

    componentDidMount() 
    {
        // setTimeout(()=>{
        //     console.log("component didmount");

        // },2000);

        console.log("component didmount");
    }

    // componentWillReceiveProps(nextProps) {

    // }

    shouldComponentUpdate(nextProps, nextState) {
        console.log("should Component Update called");
        console.log("nextState",nextState);
        return true;


    }

    // componentWillUpdate(nextProps, nextState) 
    // {

    // }

    componentDidUpdate(prevProps, prevState)
     {
        console.log("Componentdid Update called");
        console.log("prevState",prevState);



    }

    componentWillUnmount()
     {
        console.log("Component willunmount called");

    }

    BtnClik=()=>{
        // setTimeout(()=>{
        //     this.setState({counter:this.state.counter+1})
        // },2000);

                  this.setState({counter:this.state.counter+1})

    }

    render() 
    {
        console.log("render called");
        return (
            <>
             <div className='container'>
                <div className="row mt-5">
                    <div className="col">
                        <h1>{this.state.counter}</h1>
                        <button className='btn btn-success' onClick={(this.BtnClik)}>Click here</button>

                    </div>
                </div>

            </div>
            </>
           
        );
    }
}

LifeCycle.propTypes = {

};

export default LifeCycle;